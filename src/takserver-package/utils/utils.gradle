def hardened_rpm_download_directory = "$buildDir/docker/hardened-shared/takArtifacts/security"

task copyLicense(type: Copy) {
	from("${project.rootDir}/../")
	include 'LICENSE.txt'
	into "$buildDir/takArtifacts"
}
// Copy db-utils scripts
task copyDbScripts(type: Copy) {
	from project(':takserver-schemamanager').file('scripts')
	into "$buildDir/takArtifacts/db-utils"
}

// Gather all wars into this build
task copyWars(type: Copy) {
	dependsOn(':takserver-core:bootWar')

	from project(':takserver-core').collect { it.tasks.withType(War) }
	into "$buildDir/takArtifacts"
	rename('takserver-core-' + version + '.war', 'takserver.war')
	exclude 'takserver-war*', 'takserver-war-*.war'
}

// Get CoreConfig.xsd, other XSDs
task copyCoreConfigXSD(type: Copy) {
	from project(':takserver-common').file('src/main/xsd')
	include '*.xsd'
	into "$buildDir/takArtifacts"
}

// Get CoreConfig.example.xml
task copyCoreConfigExample(type: Copy) {
	from project(':takserver-core').file('example/')
	include 'CoreConfig.example.xml', 'logging-restrictsize.xml'
	into "$buildDir/takArtifacts"
}

// Copy scripts
task copyCoreScripts(type: Copy) {
	from project(':takserver-core').file('scripts')
	into "$buildDir/takArtifacts"
	exclude 'utils','messaging*', 'API*', 'plugins*', 'retention*', "launcher*", 'takserver.sh'
}

// Copy docs
task copyDocs(type: Copy) {
	from getRootProject().file('docs')
	include '*.pdf'
	into "$buildDir/takArtifacts/docs"
}

// Copy selinux policy
task copyPolicy(type: Copy) {
	from project(':takserver-core').file('scripts/utils')
	include '*.te'
	into "$buildDir/takArtifacts"
}

task createLogDir() {
	def logs = new File("$buildDir/takArtifacts/logs")
	doLast {
		logs.mkdirs()
		new File(logs, "takserver.log").text = ""
	}
}

task createPluginsLibDir() {
	def logs = new File("$buildDir/takArtifacts/lib")
	doLast {
		logs.mkdirs()
	}
}

// Gather all jars into this build (including shadow jars)
task copyJars(type: Copy) {
	dependsOn(':takserver-core:bootJar')
	dependsOn(':takserver-schemamanager:shadowJar')
	dependsOn(':takserver-usermanager:shadowJar')
	dependsOn(':takserver-takcl-core:publicJar')

	from getRootProject().subprojects.collect { it.tasks.withType(Jar) }
	into "$buildDir/takArtifacts"
	rename('schemamanager-' + version + '-uber.jar', 'db-utils/SchemaManager.jar')
	rename('UserManager-' + version + '-all.jar', 'utils/UserManager.jar')
	rename('takcl-' + version + '-exe.jar', 'utils/takcl.jar')
	exclude 'takserver-common*', 'takserver-core*', 'takserver-package*', 'API*', 'messaging*',
			'database*', 'takserver-schemamanager*', 'takserver-takcl*', 'takserver-usermanager*',
			'takserver-war-*', 'takcl-dev*', 'takserver-plugin*',
			'takserver-plugin-manager*', 'takserver-cluster*', 'takserver-fig-core*', 'takserver-retention*',
			'rol*', 'Periodic*', 'launcher*', 'takserver-' + version + '*',
			'federation-hub-*', 'federation-common-*', 'takserver-protobuf-*'
}

// Gather all jars into this build (including shadow jars)
task copyJarsNoDb(type: Copy) {
	dependsOn(':takserver-core:bootJar')
	dependsOn(':takserver-usermanager:shadowJar')
	dependsOn(':takserver-takcl-core:publicJar')

	from getRootProject().subprojects.collect { it.tasks.withType(Jar) }
	into "$buildDir/takArtifacts"
	rename('UserManager-' + version + '-all.jar', 'utils/UserManager.jar')
	rename('takcl-' + version + '-exe.jar', 'utils/takcl.jar')
	exclude 'takserver-common*', 'takserver-core*', 'takserver-package*', 'API*', 'messaging*',
			'database*', 'takserver-schemamanager*', 'schemamanager*', 'takserver-takcl*',
			'takserver-usermanager*', 'takserver-war-*', 'takcl-dev*', 'takserver-plugin*', 'takserver-plugin-manager*',
			'takserver-cluster*', 'takserver-fig-core*', 'takserver-retention*', 'rol*', 'Periodic*', 'launcher*', 'takserver-' + version + '*',
			'federation-hub-*', 'federation-common-*', 'takserver-protobuf-*'
}

// Copy scripts
task copyAPIScripts(type: Copy) {
	from project(':takserver-core').file('scripts')
	into "$buildDir/takArtifacts"
	exclude 'utils*', 'messaging*', 'plugins*', 'retention*', 'launcher*', 'takserver.sh'
}

// Copy scripts
task copyMessagingScripts(type: Copy) {
	from project(':takserver-core').file('scripts')
	into "$buildDir/takArtifacts"
	exclude 'utils*', 'API*', 'launcher*', 'plugins*', 'retention*', 'takserver.sh'
}

// Copy scripts
task copyLauncherAndMessagingScripts(type: Copy) {
	from project(':takserver-core').file('scripts')
	into "$buildDir/takArtifacts"
	exclude 'utils*', 'API*', 'plugins*', 'retention*', 'takserver.sh'
}

// These are wrapped in a creation method to preserve immutability.

// Copy scripts
def copyPluginsScriptsSpec() {
	return copySpec {
		from project(':takserver-core').file('scripts/plugins')
	}
}

// Copy retention config files
def copyRetentionConfigsSpec() {
	return copySpec {
		from project(':takserver-retention').file('conf/retention')
	}
}

// Copy retention mission archive store dir
def copyRetentionMissionStoreDirSpec() {
	return copySpec {
		from project(':takserver-retention').file('mission-archive/')
		rename('(.*)', 'mission-archive/$1')
	}
}

// Copy scripts
def copyRetentionScriptsSpec() {
	return copySpec {
		from project(':takserver-core').file('scripts/retention/')
		rename('(.*)', 'retention/$1')
	}
}

// Gather all jars into this build (including shadow jars)
task copySchemaManagerJar(type: Copy) {
	dependsOn(':takserver-schemamanager:shadowJar')

	from project(':takserver-schemamanager').collect { it.tasks.withType(Jar) }
	into "$buildDir/takArtifacts"
	rename('schemamanager-' + version + '-uber.jar', 'db-utils/SchemaManager.jar')
	exclude 'takserver-schemamanager*'
}

// Copy db-utils scripts from dbonly directory
task copyDbOnlyScripts(type: Copy) {
	from project(':takserver-schemamanager').file('scripts-dbonly')
	into "$buildDir/takArtifacts/db-utils"
}

def copyPluginsJarSpec() {
	return copySpec {
		from project(':takserver-plugin-manager').collect { it.tasks.withType(Jar) }
		rename('takserver-plugin-manager-' + version + '.jar', 'takserver-pm.jar')
	}
}

def copyRetentionJarSpec() {
	return copySpec {
		from project(':takserver-retention').collect { it.tasks.withType(Jar) }
		rename('takserver-retention-' + version + '.jar', 'takserver-retention.jar')
	}
}

task createCIVersionArtifacts() {
	// The docker tags, starting with the unique primary docker tag
	def primaryDockerTag = (takversion + '-' + takreleaserpm).toLowerCase()
	def dockerTags = [primaryDockerTag]
	def takVersion = version

	doLast {
		// For properly tagged types, set the appropriate publishPath
		if (takrelease.contains('RELEASE')) {
			// If it is a release, also set the x.y version tag
			dockerTags.add(takversion)

			// If the env var indicates it should be tagged as the latest, tag it as the latest
			if ("$System.env.TAG_AS_LATEST".toLowerCase() == "true") {
				dockerTags.add('latest')
			}

		} else if (!(takrelease.contains('BETA') || takrelease.contains('DEV'))) {
			// If it is an unknown type, clear the docker tags and set the publish path to dev with branch and hash information
			primaryDockerTag = ''
			dockerTags = []
			takVersion = takversion + '-' + gitbranch.replace('/', '_') + "-" + gitrev.substring(0, 8)
		}

		// Write as env vars to file that can be easily sourced by CI scripts
		def tagsStr = dockerTags.join(' ')
		new File("$projectDir/CI_ENV_VARS").text =
				"TAK_DOCKER_TAGS=\"$tagsStr\"\n" +
						"TAK_VERSION=\"$takVersion\"\n" +
						"TAK_RPM_VERSION=\"$takversion-$takreleaserpm\"\n" +
						"TAK_DOCKER_PRIMARY_TAG=\"$primaryDockerTag\"\n"
	}
}

task createVersionFile() {
	def takArtifacts = "$buildDir/takArtifacts"
	doLast {
		new File(takArtifacts).mkdirs()
		new File(takArtifacts, "version.txt").text = """$version"""
	}
}

task createDockerDirs() {
	doLast {
		mkdir "$buildDir/takArtifacts/logs"
		mkdir "$buildDir/takArtifacts/lib"
		mkdir "$buildDir/takArtifacts/webcontent/webtak-plugins"
		new File("$buildDir/takArtifacts/logs/takserver.log").text = ""
	}
}

def copyCoreDockerFilesSpec() {
	return from('build/takArtifacts') {
		exclude('db-utils/pg_hba.conf', 'db-utils/postgresql.conf',
				'CoreConfig.example.xml', 'takserver-plugins.sh', 'takserver-plugins-cluster.sh',
				'takserver-plugins', 'takserver-pm.jar', 'takserver-retention.jar', 'mission-archive', 'retention')
	}
}

def copyDockerSchemaManagerSpec() {
	return from(project(':takserver-schemamanager').file('docker')) {
		include('pg_hba.conf')
		include('postgresql.conf')
		rename('(pg_hba.conf)', 'db-utils/$1')
		rename('(postgresql.conf)', 'db-utils/$1')
	}
}

//// Legacy individual ones for other elements so they properly build still

task copyPluginsJar(type: Copy) {
	from project(':takserver-plugin-manager').collect { it.tasks.withType(Jar) }
	rename('takserver-plugin-manager-' + version + '.jar', 'takserver-pm.jar')
	into "$buildDir/takArtifacts"
}

task copyRetentionJar(type: Copy) {
	from project(':takserver-retention').collect { it.tasks.withType(Jar) }
	rename('takserver-retention-' + version + '.jar', 'takserver-retention.jar')
	into "$buildDir/takArtifacts"
}

task copyRetentionScripts(type: Copy) {
	from project(':takserver-core').file('scripts/retention/')
	rename('(.*)', 'retention/$1')
	into "$buildDir/takArtifacts"
}

task copyRetentionMissionStoreDir(type: Copy) {
	from project(':takserver-retention').file('mission-archive/')
	rename('(.*)', 'mission-archive/$1')
	into "$buildDir/takArtifacts/"
}
task copyPluginsScripts(type: Copy) {
	from project(':takserver-core').file('scripts/plugins')
	into "$buildDir/takArtifacts"
}

task copyRetentionConfigs(type: Copy) {
	from project(':takserver-retention').file('conf/retention')
	into "$buildDir/takArtifacts/conf/retention"
}

task constructDockerZip(type: Zip) {
	dependsOn createDockerDirs
	dependsOn createVersionFile
	dependsOn (':takserver-package:prePackage')
	dependsOn copyCoreScripts
	dependsOn copyDbScripts
	dependsOn copyLauncherAndMessagingScripts
	dependsOn createVersionFile

	archiveName 'takserver-docker-' + version + '.zip'
	duplicatesStrategy 'fail'
	destinationDir(file("$buildDir/distributions"))
	into('takserver-docker-' + version)

	from('build/takArtifacts') {
		exclude('db-utils/pg_hba.conf', 'db-utils/postgresql.conf',
				'CoreConfig.example.xml', 'takserver-plugins.sh', 'takserver-plugins-cluster.sh',
				'takserver-plugins', 'takserver-pm.jar', 'takserver-retention.jar', 'mission-archive', 'retention')
		into('tak')
	}

	from(project(':takserver-core').file('scripts/plugins')) {
		into('tak')
	}

	from(project(':takserver-plugin-manager').collect { it.tasks.withType(Jar) }) {
		rename('takserver-plugin-manager-' + version + '.jar', 'takserver-pm.jar')
		into('tak')
	}

	from(project(':takserver-retention').file('mission-archive/')) {
		rename('(.*)', 'mission-archive/$1')
		into('tak')
	}

	from(project(':takserver-core').file('scripts/retention/')) {
		rename('(.*)', 'retention/$1')
		into('tak')
	}

	from(project(':takserver-retention').collect { it.tasks.withType(Jar) }) {
		rename('takserver-retention-' + version + '.jar', 'takserver-retention.jar')
		into('tak')
	}

	from(project(':takserver-schemamanager').file('docker')) {
		include('pg_hba.conf')
		include('postgresql.conf')
		rename('(pg_hba.conf)', 'db-utils/$1')
		rename('(postgresql.conf)', 'db-utils/$1')
		into('tak')
	}

	// Include the standard docker CoreConfig.xml
	from(project(':takserver-core').file('example')) {
		include('CoreConfig.example.docker.xml')
		rename('CoreConfig.example.docker.xml', 'tak/CoreConfig.example.xml')
	}

	from(project(':takserver-core').file('docker')) {
		include('configureInDocker.sh')
		include('Dockerfile.takserver')
		rename('(configureInDocker.sh)', 'tak/$1')
		rename('(Dockerfile.takserver)', 'docker/$1')
	}

	from(project(':takserver-schemamanager').file('docker')) {
		include('configureInDocker.sh')
		include('Dockerfile.takserver-db')
		rename('(configureInDocker.sh)', 'tak/db-utils/$1')
		rename('(Dockerfile.takserver-db)', 'docker/$1')
	}
}

task fetchRpmsForHardenedDocker(type: Exec) {
	dependsOn (':takserver-package:prePackage')
	def epelFilename="epel-release-latest-8.noarch.rpm"
	def outputfilepath="${hardened_rpm_download_directory}/${epelFilename}"
	outputs.file(outputfilepath)
    commandLine "curl", "--create-dirs", "https://dl.fedoraproject.org/pub/epel/${epelFilename}", "--output", outputfilepath
}

task constructIronbankDBZip(type: Zip) {
	dependsOn createDockerDirs
	dependsOn createVersionFile
	dependsOn fetchRpmsForHardenedDocker
	dependsOn copyLauncherAndMessagingScripts

	archiveName 'takserver-ironbank-db-' + version + '.zip'
	duplicatesStrategy 'fail'
	destinationDir(file("$buildDir/distributions"))
	into('takserver-ironbank-db-' + version)

	from('build/takArtifacts/db-utils') {
		exclude('pg_hba.conf', 'postgresql.conf', 'takserver-setup-db.sh')
		into('db-utils')
	}

	from(project(':takserver-schemamanager').file('docker')) {
		include('pg_hba.conf')
		include('postgresql.conf')
		rename('(pg_hba.conf)', '$1')
		rename('(postgresql.conf)', '$1')
		into('db-utils')
	}

	// Include the hardened docker CoreConfig.xml
	from(project(':takserver-core').file('example')) {
		include('CoreConfig.example.docker-hardened.xml')
		rename('CoreConfig.example.docker-hardened.xml', 'CoreConfig.example.xml')
	}

	// Include the hardened schemamanager-specific files
	from(project(':takserver-schemamanager').file('docker/hardened')) {
		rename('(configureInDocker.sh)', 'db-utils/$1')
		rename('(takserver-setup-db.sh)', 'db-utils/$1')
	}

}

task constructHardenedDockerZip(type: Zip) {
	dependsOn createDockerDirs
	dependsOn createVersionFile
	dependsOn fetchRpmsForHardenedDocker
	dependsOn copyLauncherAndMessagingScripts


	archiveName 'takserver-docker-hardened-' + version + '.zip'
	duplicatesStrategy 'fail'
	destinationDir(file('build/distributions'))
	into('takserver-docker-hardened-' + version)

	from('build/takArtifacts') {
		exclude('db-utils/pg_hba.conf', 'db-utils/postgresql.conf',
				'CoreConfig.example.xml', 'takserver-plugins.sh', 'takserver-plugins-cluster.sh',
				'takserver-plugins', 'takserver-pm.jar', 'takserver-retention.jar', 'mission-archive', 'retention', 'db-utils/takserver-setup-db.sh')
		into('tak')
	}

	from(project(':takserver-core').file('scripts/plugins')) {
		into('tak')
	}

	from(project(':takserver-plugin-manager').collect { it.tasks.withType(Jar) }) {
		rename('takserver-plugin-manager-' + version + '.jar', 'takserver-pm.jar')
		into('tak')
	}

	from(project(':takserver-retention').file('mission-archive/')) {
		rename('(.*)', 'mission-archive/$1')
		into('tak')
	}

	from(project(':takserver-core').file('scripts/retention/')) {
		rename('(.*)', 'retention/$1')
		into('tak')
	}

	from(project(':takserver-retention').collect { it.tasks.withType(Jar) }) {
		rename('takserver-retention-' + version + '.jar', 'takserver-retention.jar')
		into('tak')
	}

	from(project(':takserver-schemamanager').file('docker')) {
		include('pg_hba.conf')
		include('postgresql.conf')
		rename('(pg_hba.conf)', 'db-utils/$1')
		rename('(postgresql.conf)', 'db-utils/$1')
		into('tak')
	}

	// Include the hardened CoreConfig.xml
	from(project(':takserver-core').file('example')) {
		include('CoreConfig.example.docker-hardened.xml')
		rename('CoreConfig.example.docker-hardened.xml', 'tak/CoreConfig.example.xml')
	}

	from(project(':takserver-core').file('docker')) {
		include('configureInDocker.sh')
		rename('(configureInDocker.sh)', 'tak/$1')
	}

	// Include the hardened docker-specific files
	from(project(':takserver-core').file('docker/hardened')) {
		exclude('full')
		rename('(Dockerfile.ca)', 'docker/$1')
		rename('(Dockerfile.hardened-takserver)', 'docker/$1')
		rename('(README_hardened_docker.md)', 'docker/$1')
	}

	from(hardened_rpm_download_directory) {
		into('tak/security')
	}

	// Include the hardened schemamanager-specific files
	from(project(':takserver-schemamanager').file('docker/hardened')) {
		exclude('full')
		rename('(configureInDocker.sh)', 'tak/db-utils/$1')
		rename('(takserver-setup-db.sh)', 'tak/db-utils/$1')
		rename('(Dockerfile.hardened-takserver-db)', 'docker/$1')
	}
}

task constructFullDockerZip(type: Zip) {
	dependsOn createDockerDirs
	dependsOn copyLauncherAndMessagingScripts
	dependsOn createVersionFile
	dependsOn (':takserver-package:prePackage')



	archiveName 'takserver-docker-full-' + version + '.zip'
	duplicatesStrategy 'exclude'
	destinationDir(file("$buildDir/distributions"))
	into('takserver-docker-full-' + version)

	from('build/takArtifacts') {
		exclude('db-utils/pg_hba.conf', 'db-utils/postgresql.conf',
				'CoreConfig.example.xml', 'takserver-plugins.sh', 'takserver-plugins-cluster.sh',
				'takserver-plugins', 'takserver-pm.jar', 'takserver-retention.jar', 'mission-archive', 'retention')
		into('tak')
	}

	from(project(':takserver-core').file('scripts/plugins')) {
		into('tak')
	}

	from(project(':takserver-plugin-manager').collect { it.tasks.withType(Jar) }) {
		rename('takserver-plugin-manager-' + version + '.jar', 'takserver-pm.jar')
		into('tak')
	}

	from(project(':takserver-retention').file('conf/retention')) {
		into('tak/conf/retention')
	}

	from(project(':takserver-retention').file('mission-archive/')) {
		rename('(.*)', 'mission-archive/$1')
		into('tak')
	}

	from(project(':takserver-core').file('scripts/retention/')) {
		rename('(.*)', 'retention/$1')
		into('tak')
	}

	from(project(':takserver-retention').collect { it.tasks.withType(Jar) }) {
		rename('takserver-retention-' + version + '.jar', 'takserver-retention.jar')
		into('tak')
	}

	from(project(':takserver-schemamanager').file('docker')) {
		include('pg_hba.conf')
		include('postgresql.conf')
		rename('(pg_hba.conf)', 'db-utils/$1')
		rename('(postgresql.conf)', 'db-utils/$1')
		into('tak')
	}

	// Include the standard docker CoreConfig.xml
	from(project(':takserver-core').file('example')) {
		include('CoreConfig.example.docker.xml')
		rename('(.*)', 'tak/CoreConfig.example.xml')
	}

	from(project(':takserver-core').file('docker')) {
		include('configureInDocker.sh')
		rename('(configureInDocker.sh)', 'tak/$1')
	}

	from(project(':takserver-core').file('docker/full')) {
		include('coreConfigEnvHelper.py')
		include('docker-compose.yml')
		include('docker_entrypoint.sh')
		include('Dockerfile.takserver')
		include('EDIT_ME.env')
		include('full-README.md')

		rename('(coreConfigEnvHelper.py)', 'tak/$1')
		rename('(docker-compose.yml)', 'docker/$1')
		rename('(docker_entrypoint.sh)', 'tak/$1')
		rename('(Dockerfile.takserver)', 'docker/$1')
		rename('(EDIT_ME.env)', 'docker/$1')
		rename('(full-README.md)', 'docker/$1')
	}

	from(project(':takserver-schemamanager').file('docker')) {
		include('configureInDocker.sh')
		rename('(configureInDocker.sh)', 'tak/db-utils/$1')
	}
}


task constructHardenedFullDockerZip(type: Zip) {
	dependsOn createDockerDirs
	dependsOn copyLauncherAndMessagingScripts
	dependsOn createVersionFile
	dependsOn fetchRpmsForHardenedDocker
	dependsOn createLogDir
	dependsOn createPluginsLibDir
	dependsOn copySchemaManagerJar


	archiveName 'takserver-docker-hardened-full-' + version + '.zip'
	duplicatesStrategy 'exclude'
	destinationDir(file("$buildDir/distributions"))
	into('takserver-docker-hardened-full-' + version)

	from('build/takArtifacts') {
		exclude('db-utils/pg_hba.conf', 'db-utils/postgresql.conf',
				'CoreConfig.example.xml', 'takserver-plugins.sh', 'takserver-plugins-cluster.sh',
				'takserver-plugins', 'takserver-pm.jar', 'takserver-retention.jar', 'mission-archive', 'retention')
		into('tak')
	}

	from(project(':takserver-core').file('scripts/plugins')) {
		into('tak')
	}

	from(project(':takserver-plugin-manager').collect { it.tasks.withType(Jar) }) {
		rename('takserver-plugin-manager-' + version + '.jar', 'takserver-pm.jar')
		into('tak')
	}

	from(project(':takserver-retention').file('mission-archive/')) {
		rename('(.*)', 'mission-archive/$1')
		into('tak')
	}

	from(project(':takserver-core').file('scripts/retention/')) {
		rename('(.*)', 'retention/$1')
		into('tak')
	}

	from(project(':takserver-retention').collect { it.tasks.withType(Jar) }) {
		rename('takserver-retention-' + version + '.jar', 'takserver-retention.jar')
		into('tak')
	}

	// Include the standard docker CoreConfig.xml
	from(project(':takserver-core').file('docker/hardened/full')) {
		include('CoreConfig.example.docker-hardened-full.xml')
		rename('(.*)', 'tak/CoreConfig.example.xml')
	}

	from(project(':takserver-core').file('docker')) {
		include('configureInDocker.sh')
		rename('(configureInDocker.sh)', 'tak/$1')
	}

	from(project(':takserver-core').file('docker/hardened/full')) {
		include('docker-compose.yml')
		include('docker_entrypoint.sh')
		include('EDIT_ME.env')
		include('full-README.md')

		rename('(docker-compose.yml)', 'docker/$1')
		rename('(docker_entrypoint.sh)', 'tak/$1')
		rename('(EDIT_ME.env)', 'docker/$1')
		rename('(full-README.md)', 'docker/$1')
	}

	from(project(':takserver-core').file('docker/hardened/full')) {
		include('Dockerfile.hardened-full-takserver')
		into('docker')
	}

	from(project(':takserver-core').file('docker/hardened/tak')) {
		include('security/**')
		include('health/**')
		into('tak')
	}

	from(hardened_rpm_download_directory) {
		into('tak/security')
	}

	from(project(':takserver-schemamanager').file('docker/hardened/full')) {
		exclude('Dockerfile.hardened-full-takserver-db')
		into("tak/db-utils/full")
    }

	from(project(':takserver-schemamanager').file('docker/hardened/full')) {
		include('Dockerfile.hardened-full-takserver-db')
		into("docker")
	}
}

//// I'm not sure these two should even be in the takserver RPM. But I don't want to risk breaking it
task copyDockerSecurityFiles(type: Copy) {
	from project(':takserver-core').file('docker/hardened/tak/security')
	include "rpms/repos/*"
	include "rpms/signatures/*"
	include "epel-release*"
	into "$buildDir/docker/hardened/takArtifacts/security"
}

task copyHealthCheckScripts(type: Copy) {
	from project(':takserver-core').file('docker/hardened/tak/health')
	into "$buildDir/docker/hardened/takArtifacts/health"
}


// Copy hardened schemamanager dockerfiles
task copyHardenedSchemaManagerFiles(type: Copy) {
	from project(':takserver-schemamanager').file('docker')
	include 'pg_hba.conf'
	include 'postgresql.conf'
	include 'hardened/*'
	into "$buildDir/docker"
	rename('pg_hba.conf', '../docker/hardened/takArtifacts/db-utils/pg_hba.conf')
	rename('postgresql.conf', '../docker/hardened/takArtifacts/db-utils/postgresql.conf')
	rename('configureInDocker.sh', '../hardened/takArtifacts/db-utils/configureInDocker.sh')
	rename('takserver-setup-db.sh', '../hardened/takArtifacts/db-utils/takserver-setup-db.sh')
}
