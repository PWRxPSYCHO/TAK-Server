buildscript {
  dependencies {
   classpath 'com.netflix.nebula:gradle-ospackage-plugin:' + gradle_ospackage_version
  }
}

apply plugin: 'nebula.ospackage'
apply from: "utils/utils.gradle"

ext {
    // rpm preinstall script
    _preinstall_script = '''\
echo "takserver-package: preinstall $1 $2"

set +e
# stop TAK Server if it is running (including older versions)
pkill -9 -f takserver.jar >/dev/null 2>&1
pkill -9 -f takserver.war >/dev/null 2>&1
pkill -9 -f takserver-web.war >/dev/null 2>&1
pkill -9 -f TAKServer.jar >/dev/null 2>&1
pkill -9 -f takserver-pm.jar >/dev/null 2>&1
pkill -9 -f takserver-retention.jar >/dev/null 2>&1
pkill -9 -f apache-tomcat >/dev/null 2>&1
systemctl stop takserver >/dev/null 2>&1
set -e

mkdir -p /opt/tak

set +e
uid=`id -u tak 2>/dev/null`
set -e
if [ -z "$uid" ] ; then
    # User id 1491 is arbitrary
    echo "Adding 'tak' user"
    useradd tak -r -u 1491 --no-create-home -d /opt/tak
fi

if [ -f /opt/tak/db-utils/clear-old-data.sql ] ; then
    mv /opt/tak/db-utils/clear-old-data.sql /opt/tak/db-utils/clear-old-data.sql.bak
fi

mkdir -p /opt/tak/certs-tmp
cp /opt/tak/certs/cert-metadata.sh /opt/tak/certs-tmp/. 2>/dev/null || :
cp /opt/tak/certs/config.cfg /opt/tak/certs-tmp/. 2>/dev/null || :

if [ ! -f /etc/debian_version ]; then
    # Backup existing retention config files
    if [ -f /opt/tak/conf/retention/retention-policy.yml ]; then
        echo "Backing up existing retention policy configuration"
        cp /opt/tak/conf/retention/retention-policy.yml /opt/tak/conf/retention/retention-policy_bak.yml
    fi

    if [ -f /opt/tak/conf/retention/retention-service.yml ]; then
        echo "Backing up existing retention service configuration"
        cp /opt/tak/conf/retention/retention-service.yml /opt/tak/conf/retention/retention-service_bak.yml
    fi

    if [ -f /opt/tak/conf/retention/mission-archiving-config.yml ]; then
        echo "Backing up existing mission archive configuration"
        cp /opt/tak/conf/retention/mission-archiving-config.yml /opt/tak/conf/retention/mission-archiving-config_bak.yml
    fi
    
    if [ -f /opt/tak/mission-archive/mission-store.yml ]; then
        echo "Backing up existing mission store"
        cp /opt/tak/mission-archive/mission-store.yml /opt/tak/mission-archive/mission-store_bak.yml
    fi
fi
'''

    _preuninstall_script = '''\
echo "takserver-package: preuninstall $1 $2"
case "$1" in
    1|upgrade)
        if [ -f /etc/debian_version ]; then
            # Backup existing retention config files
            if [ -f /opt/tak/conf/retention/retention-policy.yml ]; then
                echo "Backing up existing retention policy configuration"
                cp /opt/tak/conf/retention/retention-policy.yml /opt/tak/conf/retention/retention-policy_bak.yml
            fi

            if [ -f /opt/tak/conf/retention/retention-service.yml ]; then
                echo "Backing up existing retention service configuration"
                cp /opt/tak/conf/retention/retention-service.yml /opt/tak/conf/retention/retention-service_bak.yml
            fi

            if [ -f /opt/tak/conf/retention/mission-archiving-config.yml ]; then
                echo "Backing up existing mission archive configuration"
                cp /opt/tak/conf/retention/mission-archiving-config.yml /opt/tak/conf/retention/mission-archiving-config_bak.yml
            fi
            
            if [ -f /opt/tak/mission-archive/mission-store.yml ]; then
                echo "Backing up existing mission store"
                cp /opt/tak/mission-archive/mission-store.yml /opt/tak/mission-archive/mission-store_bak.yml
            fi
        fi
esac
'''

    // rpm post uninstall script
    _postuninstall_script = '''\
echo "takserver-package: postuninstall $1 $2"
case "$1" in
 0|remove)
        # uninstall
        echo "Deleting tak user"
        userdel tak
        ;;
 1|upgrade)
        # this is an upgrade, do nothing
        :
        ;;
esac
'''
    _user = 'tak'
    _permission_group = 'tak'
    _package_group = 'Applications/Internet'
    _package_description = '''\
The Team Awareness Kit (TAK) server is a network server supporting the family of TAK
situation-awareness applications, such as the Android Team Awareness Kit (ATAK) and 
Windows Team Awareness Kit (WinTAK). TAK server provides brokering, filtering, and
archiving of Cursor-on-Target (CoT) information and provides interconnectivity to
TAK devices on non-multicast networks.
'''
    _license = 'Distribution Statement A: Approved for public release; distribution is unlimited.'
    _url = 'https://atakmap.com'
    _summary = 'Team Awareness Kit (TAK) Tactical Information Management System'
}


// rpm postinstall script
def postinstall_script = '''\
echo "takserver-package: postinstall $1 $2"

export tak_full_version=''' + takversion + '''-''' + takrelease + '''

chown tak:tak /opt/tak

chmod 644 /opt/tak/logging-restrictsize.xml
chmod 544 /opt/tak/*.bat
chmod 544 /opt/tak/*.sh
chmod u+w /opt/tak/takserver.sh
chown root:root /opt/tak/db-utils/pg_hba.conf
chmod 600 /opt/tak/db-utils/pg_hba.conf
chmod 500 /opt/tak/certs/*.sh
chmod 600 /opt/tak/certs/cert-metadata.sh

chmod 544 /opt/tak/db-utils/*.sh
chmod 500 /opt/tak/db-utils/clear-old-data.sh
chmod 500 /opt/tak/db-utils/clear-old-data.sql
chown postgres:postgres /opt/tak/db-utils/clear-old-data.sh
chown postgres:postgres /opt/tak/db-utils/clear-old-data.sql

chown root:root /opt/tak/utils/takserver-combined
chmod 755 /opt/tak/utils/takserver-combined
cp /opt/tak/utils/takserver-combined /etc/init.d
chmod 755 /opt/tak/utils
mkdir -p /opt/tak/logs
chown tak:tak /opt/tak/logs
chmod 755 /opt/tak/logs
if [ -f "/opt/tak/CoreConfig.xml" ]; then
    chown -f tak:tak /opt/tak/CoreConfig.xml 2>/dev/null
fi
mkdir -p /opt/tak/iconsets
chown -fR tak:tak /opt/tak/iconsets
mkdir -p /opt/tak/webcontent/webtak-plugins/plugins
if [ ! -f /opt/tak/webcontent/webtak-plugins/webtak-manifest.json ]; then 
\techo -e "{\\n\\t\\"plugins\\": [], \\n\\t\\"iconSets\\": []\\n}" > /opt/tak/webcontent/webtak-plugins/webtak-manifest.json
fi
chown -fR tak:tak /opt/tak/webcontent
mkdir -p /opt/tak/logs
chown tak:tak /opt/tak/logs
mkdir -p /opt/tak/lib
chown tak:tak /opt/tak/lib

cp /opt/tak/certs-tmp/cert-metadata.sh /opt/tak/certs/. 2>/dev/null || :
cp /opt/tak/certs-tmp/config.cfg /opt/tak/certs/. 2>/dev/null || :
rm -rf /opt/tak/certs-tmp

# rename old tomcat if it exists
if [ -f "/opt/tak/apache-tomcat" ]; then
    mv /opt/tak/apache-tomcat /opt/tak/apache-tomcat_NO_LONGER_USED >/dev/null 2>&1
fi

# setup a default DB password
sh /opt/tak/db-utils/setupDefaultPassword.sh

if [ -f /opt/tak/db-utils/clear-old-data.sql.bak ] ; then
    mv /opt/tak/db-utils/clear-old-data.sql /opt/tak/db-utils/clear-old-data.sql.dist.$tak_full_version
    mv /opt/tak/db-utils/clear-old-data.sql.bak /opt/tak/db-utils/clear-old-data.sql
fi

# Reinstate existing retention config files
if [ -f /opt/tak/conf/retention/retention-policy_bak.yml ]; then
    echo "Restoring retention policy configuration from backup"
    mv /opt/tak/conf/retention/retention-policy_bak.yml /opt/tak/conf/retention/retention-policy.yml
fi

if [ -f /opt/tak/conf/retention/retention-service_bak.yml ]; then
    echo "Restoring retention service configuration from backup"
    mv /opt/tak/conf/retention/retention-service_bak.yml /opt/tak/conf/retention/retention-service.yml
fi

if [ -f /opt/tak/conf/retention/mission-archiving-config_bak.yml ]; then
    echo "Restoring existing mission archive configuration from backup"
    mv /opt/tak/conf/retention/mission-archiving-config_bak.yml /opt/tak/conf/retention/mission-archiving-config.yml
fi

if [ -f /opt/tak/mission-archive/mission-store_bak.yml ]; then
    echo "Restoring existing mission store from backup"
    mv /opt/tak/mission-archive/mission-store_bak.yml /opt/tak/mission-archive/mission-store.yml
fi

# extract takserver.war on Debian based installs
if [ -f /etc/debian_version ]; then
    sh /opt/tak/setup-for-extracted-war.sh
fi


sudo /opt/tak/db-utils/takserver-setup-db.sh

echo "By default, TAK Server requires a keystore and truststore (X.509 certificates). Follow the instructions in Appendix B of the configuration guide to create these certificates."
echo "After generating certificates, use the following command to register an admin account:"
echo "> sudo java -jar /opt/tak/utils/UserManager.jar certmod -A /opt/tak/certs/files/admin.pem"
echo "Using Firefox or Chrome on this computer add the admin certificate to the local browser trust and browse to this address to verify keystore and truststore configuration:"
echo "http://localhost:8443"
echo "Follow the instructions in the Installation section of the configuration guide to complete the setup process."
'''

ospackage {
 packageName = 'takserver-combined'
 version = takversion
 release = takreleaserpm
 os = LINUX
 user = _user
 permissionGroup = _permission_group
 packageGroup = _package_group
 packageDescription = _package_description
 license = _license
 url = _url
 summary = _summary

 preUninstall _preuninstall_script
 preInstall _preinstall_script
 postInstall postinstall_script
 postUninstall _postuninstall_script

 from ("$buildDir/takArtifacts") {
   into 'opt/tak'
   fileMode = 444
   dirMode = 755
 }
}



task prePackage { }
prePackage.dependsOn copyJars
prePackage.dependsOn copyWars
prePackage.dependsOn copyCoreConfigXSD
prePackage.dependsOn copyCoreConfigExample
prePackage.dependsOn copyCoreScripts
prePackage.dependsOn copyDbScripts
prePackage.dependsOn copyDocs
prePackage.dependsOn copyPolicy
prePackage.dependsOn copyLicense
prePackage.dependsOn copyAPIScripts
prePackage.dependsOn copyPluginsJar
prePackage.dependsOn copyPluginsScripts
prePackage.dependsOn copyRetentionConfigs
prePackage.dependsOn copyRetentionJar
prePackage.dependsOn copyRetentionMissionStoreDir
prePackage.dependsOn copyRetentionScripts
prePackage.dependsOn copySchemaManagerJar

buildRpm.dependsOn prePackage

buildDeb.dependsOn prePackage




buildRpm {
  requires('java-17-openjdk-devel')
  requires('postgis33_15')
  requires('postgis33_15-utils')
  requires('postgresql15-server')
  requires('postgresql15-contrib')
}

// NB can configure deb package generation here
buildDeb {
  requires('openjdk-17-jdk')
  requires('postgresql-15')
  requires('postgresql-15-postgis-3')
}

task bundleRpm(type: Zip) {
    archiveName 'takserver-bundle-' + takversion + '-' + takrelease + branch + '.zip'
    destinationDir(file('build/'))
    from('takserver/build/distributions/') {}
    from ('takserver/build/takArtifacts/docs/') {
        include 'TAK_Server_Configuration_Guide.pdf'
    }
    into ('multiprocess')  {
        from('database/build/distributions/', 'launcher/build/distributions/')
    }
}

task bundleRpmCoreDb(type: Zip) {
    archiveName 'takserver-rpm-core-db-' + takversion + '-' + takrelease + branch + '.zip'
    from('database/build/distributions/', 'launcher/build/distributions/')
    from ('takserver/build/takArtifacts/docs/') {
        include 'TAK_Server_Configuration_Guide.pdf'
    }
}

task bundlePublishArtifacts(type: Copy) {
   dependsOn('database:buildRpm', 'federation-hub:buildRpm', 'takserver:buildRpm', 'launcher:buildRpm', 'database:buildDeb', 'federation-hub:buildDeb', 'takserver:buildDeb', 'launcher:buildDeb', 'buildDocker', 'buildIronBankDB', 'buildHardenedDocker', 'buildFullDocker','buildHardenedFullDocker','buildFedhubDocker', 'createCIVersionArtifacts', ':takserver-cluster:buildCluster')

    def rpmv = "${takversion}-${takreleaserpm}"
    def zipv = "${takversion}-${takrelease}"
    from("resources/takserver-public-gpg.key",
            "takserver/build/takArtifacts/docs/TAK_Server_Configuration_Guide.pdf",
            "takserver/build/distributions/takserver-${rpmv}.noarch.rpm",
            "build/distributions/takserver-docker-${zipv}.zip",
            "build/distributions/takserver-ironbank-db-${zipv}.zip",
            "build/distributions/takserver-docker-full-${zipv}.zip",
            "build/distributions/takserver-docker-hardened-${zipv}.zip",
            "build/distributions/takserver-docker-hardened-full-${zipv}.zip",
            "launcher/build/distributions/takserver-core-${rpmv}.noarch.rpm",
            "database/build/distributions/takserver-database-${rpmv}.noarch.rpm",
            "${rootDir}/takserver-cluster/build/distributions/takserver-cluster-${zipv}.zip",
            "federation-hub/build/distributions/takserver-fed-hub-${rpmv}.noarch.rpm",
            "federation-hub/build/distributions/takserver-fedhub-docker-${zipv}.zip",
            "takserver/build/distributions/takserver_${rpmv}_all.deb",
            "launcher/build/distributions/takserver-core_${rpmv}_all.deb",
            "database/build/distributions/takserver-database_${rpmv}_all.deb",
            "federation-hub/build/distributions/takserver-fed-hub_${rpmv}_all.deb"
    )
    into "${rootDir}/UNSIGNED/${version}/"
}

task buildFedhubDocker(type: GradleBuild) {
  description = 'Builds takserver-fedhub-' + takversion + '-' + takreleaserpm + '.zip'
  dependsOn('federation-hub:constructFedhubDockerZip')
}

task buildDocker {
  description = 'Builds takserver-docker-' + takversion + '-' + takreleaserpm + '.zip'
  dependsOn constructDockerZip
}

task buildIronBankDB {
  description = 'takserver-ironbank-db-' + takversion + '-' + takreleaserpm + '.zip'
  dependsOn constructIronbankDBZip
}

task buildHardenedDocker {
  description = 'Builds takserver-docker-hardened-' + takversion + '-' + takreleaserpm + '.zip'
  dependsOn constructHardenedDockerZip
}

task buildFullDocker {
  description = 'Builds takserver-docker-full-' + takversion + '-' + takreleaserpm + '.zip'
  dependsOn constructFullDockerZip
}


task buildHardenedFullDocker {
    description = 'Builds takserver-docker-hardened-full-' + takversion + '-' + takreleaserpm + '.zip'
    dependsOn constructHardenedFullDockerZip
}

task createCIVersionArtifact() {
    // The docker tags, starting with the unique primary docker tag
    def primaryDockerTag = (takversion + '-' + takreleaserpm).toLowerCase()
    def dockerTags = [primaryDockerTag]
    def takVersion = version

    // For properly tagged types, set the appropriate publishPath
    if (takrelease.contains('RELEASE')) {
        // If it is a release, also set the x.y version tag
        dockerTags.add(takversion)

        // If the env var indicates it should be tagged as the latest, tag it as the latest
        if ("$System.env.TAG_AS_LATEST".toLowerCase() == "true") {
            dockerTags.add('latest')
        }

    } else if (!(takrelease.contains('BETA') || takrelease.contains('DEV'))) {
        // If it is an unknown type, clear the docker tags and set the publish path to dev with branch and hash information
        primaryDockerTag = ''
        dockerTags = []
        takVersion = takversion + '-' + gitbranch.replace('/', '_') + "-" + gitrev.substring(0, 8)
    }

    // Write as env vars to file that can be easily sourced by CI scripts
    def tagsStr = dockerTags.join(' ')
    new File("$projectDir/CI_ENV_VARS").text =
            "TAK_DOCKER_TAGS=\"$tagsStr\"\n" +
                    "TAK_VERSION=\"$takVersion\"\n" +
                    "TAK_RPM_VERSION=\"$takversion-$takreleaserpm\"\n" +
                    "TAK_DOCKER_PRIMARY_TAG=\"$primaryDockerTag\"\n"
}
