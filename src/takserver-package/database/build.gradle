buildscript {
    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:' + gradle_ospackage_version
    }
}

apply plugin: 'nebula.ospackage'
apply from: "../utils/utils.gradle"


ext {
    takdbpkgname = 'takserver-database'

}

// Get CoreConfig.example.xml
task copyCoreConfigExampleOnly(type: Copy) {
    from project(':takserver-core').file('example/')
    include 'CoreConfig.example.xml'
    into "$buildDir/takArtifacts"
}

def modified_preinstall_script = _preinstall_script + '\n' + '''\
if [ -f "/opt/tak/CoreConfig.example.xml" ]; then
  echo '/opt/tak/CoreConfig.example.xml exists!'
  cp /opt/tak/CoreConfig.example.xml /opt/tak/CoreConfig_temp_backup.example.xml
else 
  echo '/opt/tak/CoreConfig.example.xml does not exist'
fi

echo "Checking for previous installs of the database"
#NOTE: the new version director might not exist so we check against the base directory
PGDATA_NEW=/var/lib/pgsql
PGDATA_OLD=""
# Assume (uh-oh.. wish there was a better determination) latest version is the new one and the version just below
# is the previous version
if [ -x /usr/pgsql-10/bin/postgresql-10-setup ]; then
     PGDATA_OLD=/var/lib/pgsql/10/data
elif [ -x /usr/pgsql-9.6/bin/initdb ]; then
     PGDATA_OLD=/var/lib/pgsql/9.6/data
elif [ -x /usr/pgsql-9.5/bin/initdb ]; then
     PGDATA_OLD=/var/lib/pgsql/9.5/data
elif [ -x /usr/pgsql-9.4/bin/initdb ]; then
     PGDATA_OLD=/var/lib/pgsql/9.4/data
elif [ -x /usr/pgsql-9.3/bin/initdb ]; then
     PGDATA_OLD=/var/lib/pgsql/9.3/data
elif [ -x /usr/pgsql-9.2/bin/initdb ]; then
     PGDATA_OLD=/var/lib/pgsql/9.2/data
fi

if [ ! -z "$PGDATA_OLD" ]; then
echo "Previous version found. Checking disk space requirements"  
  PGDATA_OLD_SIZE=`du -s -m $PGDATA_OLD | cut -f 1`
  # The division by one is to convert to an integer for comparison
  PGDATA_REQ_SIZE=`echo "$PGDATA_OLD_SIZE * 1.5/1" | bc`
  echo "Upgrade will require $PGDATA_REQ_SIZE MB free in partition with new Postgresql version"
  PGDATA_NEW_AVAIL=`df -m $PGDATA_NEW | grep -v Available | tr -s ' ' | cut -f 4 -d ' '`
  echo "There are $PGDATA_NEW_AVAIL MB available in partition with new Postgresql version"
  if [ "$PGDATA_NEW_AVAIL" -gt "$PGDATA_REQ_SIZE" ]; then
    echo "Disk space available is greater than required space. Upgrade of the database can proceed."
  else
    echo "Disk space available is less than required space for upgrade of the database.  Exiting..."
    exit 1
  fi
fi
'''

//println "modified_preinstall_script:"
//println modified_preinstall_script

// rpm postinstall script
def postinstall_script_db = '''\

export tak_full_version=''' + takversion + '''-''' + takrelease + '''

chown root:root /opt/tak/db-utils/pg_hba.conf
chmod 600 /opt/tak/db-utils/pg_hba.conf

chmod 544 /opt/tak/db-utils/*.sh
chmod 500 /opt/tak/db-utils/clear-old-data.sh
chmod 500 /opt/tak/db-utils/clear-old-data.sql
chown postgres:postgres /opt/tak/db-utils/clear-old-data.sh
chown postgres:postgres /opt/tak/db-utils/clear-old-data.sql

cp /opt/tak/certs-tmp/cert-metadata.sh /opt/tak/certs/. 2>/dev/null || :
cp /opt/tak/certs-tmp/config.cfg /opt/tak/certs/. 2>/dev/null || :
rm -rf /opt/tak/certs-tmp

# rename old tomcat if it exists
if [ -f "/opt/tak/apache-tomcat" ]; then
    mv /opt/tak/apache-tomcat /opt/tak/apache-tomcat_NO_LONGER_USED >/dev/null 2>&1
fi
# setup a default DB password
sh /opt/tak/db-utils/setupDefaultPassword.sh

cat <<- "EOF"

TAK SERVER SOFTWARE LICENSE AGREEMENT

Distribution Statement A: Approved for public release; distribution is unlimited.

----

EOF
''' + '''

if [ -f "/opt/tak/CoreConfig_temp_backup.example.xml" ]; then
  echo 'Reinstate the previous CoreConfig.example.xml from CoreConfig_temp_backup.example.xml...'
  mv /opt/tak/CoreConfig_temp_backup.example.xml /opt/tak/CoreConfig.example.xml
  chown tak:tak /opt/tak/CoreConfig.example.xml
fi

if [ -f /opt/tak/db-utils/clear-old-data.sql.bak ] ; then
    mv /opt/tak/db-utils/clear-old-data.sql /opt/tak/db-utils/clear-old-data.sql.dist.$tak_full_version
    mv /opt/tak/db-utils/clear-old-data.sql.bak /opt/tak/db-utils/clear-old-data.sql
fi

sudo /opt/tak/db-utils/takserver-setup-db.sh

'''

ospackage {
    packageName = takdbpkgname
    version = takversion
    release = takreleaserpm
    os = LINUX
    user = _user
    permissionGroup = _permission_group
    packageGroup = _package_group
    packageDescription = _package_description
    license = _license
    url = _url
    summary = _summary

    preInstall modified_preinstall_script
    postInstall postinstall_script_db
    postUninstall _postuninstall_script

    from ("$buildDir/takArtifacts") {
        into 'opt/tak'
        fileMode = 444
        dirMode = 755
    }
}

task prePackageDbOnlyScripts { }
prePackageDbOnlyScripts.dependsOn copyDbOnlyScripts


task prePackage { }
prePackage.dependsOn prePackageDbOnlyScripts
prePackage.dependsOn copySchemaManagerJar
prePackage.dependsOn copyCoreConfigExampleOnly
prePackage.dependsOn copyDbScripts
prePackage.dependsOn copyDocs
prePackage.dependsOn copyLicense

buildRpm.dependsOn prePackage

buildDeb.dependsOn prePackage

buildRpm {
    requires('java-17-openjdk-devel')
    requires('postgis33_15')
    requires('postgis33_15-utils')
    requires('postgresql15-server')
    requires('postgresql15-contrib')
}

buildDeb.dependsOn prePackage

// TODO: add deb package dependencies here
buildDeb {
  requires('openjdk-17-jdk')
  requires('postgresql-15')
  requires('postgresql-15-postgis-3')
}
